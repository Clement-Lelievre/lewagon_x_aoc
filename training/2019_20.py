from collections import defaultdict
from string import ascii_uppercase
import numpy as np

INPUT = '''
         A           
         A           
  #######.#########  
  #######.........#  
  #######.#######.#  
  #######.#######.#  
  #######.#######.#  
  #####  B    ###.#  
BC...##  C    ###.#  
  ##.##       ###.#  
  ##...DE  F  ###.#  
  #####    G  ###.#  
  #########.#####.#  
DE..#######...###.#  
  #.#########.###.#  
FG..#########.....#  
  ###########.#####  
             Z       
             Z       '''
             
INPUT = '''
                   A               
                   A               
  #################.#############  
  #.#...#...................#.#.#  
  #.#.#.###.###.###.#########.#.#  
  #.#.#.......#...#.....#.#.#...#  
  #.#########.###.#####.#.#.###.#  
  #.............#.#.....#.......#  
  ###.###########.###.#####.#.#.#  
  #.....#        A   C    #.#.#.#  
  #######        S   P    #####.#  
  #.#...#                 #......VT
  #.#.#.#                 #.#####  
  #...#.#               YN....#.#  
  #.###.#                 #####.#  
DI....#.#                 #.....#  
  #####.#                 #.###.#  
ZZ......#               QG....#..AS
  ###.###                 #######  
JO..#.#.#                 #.....#  
  #.#.#.#                 ###.#.#  
  #...#..DI             BU....#..LF
  #####.#                 #.#####  
YN......#               VT..#....QG
  #.###.#                 #.###.#  
  #.#...#                 #.....#  
  ###.###    J L     J    #.#.###  
  #.....#    O F     P    #.#...#  
  #.###.#####.#.#####.#####.###.#  
  #...#.#.#...#.....#.....#.#...#  
  #.#####.###.###.#.#.#########.#  
  #...#.#.....#...#.#.#.#.....#.#  
  #.###.#####.###.###.#.#.#######  
  #.#.........#...#.............#  
  #########.###.###.#############  
           B   J   C               
           U   P   P               
'''

# INPUT = '''
#                                    G           R   U       E         Z S       S                                       
#                                    W           N   C       K         Z G       D                                       
#   #################################.###########.###.#######.#########.#.#######.#####################################  
#   #.#.......#.#.........#.#.#.....#.#.....#.#.#...#.....#.........#.....#...#.#...........#.......#.....#.....#.#...#  
#   #.#####.###.###.###.#.#.#.###.###.#.###.#.#.###.#.###.###.#####.#.###.###.#.###.#########.###.###.#######.###.#.###  
#   #.#.#.#...#...#.#.#.#.................#.#...#...#.#.#...#.#.....#.#.#.#.....................#.#.......#.........#.#  
#   #.#.#.#.###.#####.#########.###########.#.#.#.###.#.#######.###.#.#.#####.###.#.###.#.###.#.###.#######.#######.#.#  
#   #...#...#.#.#.#.........#...#...#.......#.#...#.......#.....#.#.#.....#.....#.#...#.#.#...#.#...#.#.........#.#.#.#  
#   #.#.###.#.#.#.#####.#.#.#######.#.#######.###.#.###.#####.###.#####.#.###.#########.#.#.#######.#.#####.#####.#.#.#  
#   #.#...#.#.#.#.#.....#.#.................#.#...#.#.#.....#...#.#.#...#...#.#.....#.#.#.#...#.#.#...........#.#.....#  
#   ###.###.#.#.#.#.#.#####.#.###.#########.#.#######.#.#####.###.#.#.#.#####.#.#.###.#.#######.#.#.###.#######.###.#.#  
#   #...#.......#...#.#.#.#.#...#.#.........#.....#.......#.#.......#.#...#.....#.....#.#...#.........#...#.#.#.#.#.#.#  
#   ###.#######.#######.#.###########.#.#####.###.#####.###.#.#####.#.###.#.#.###.#.#######.###.#####.#####.#.#.#.#####  
#   #.......#.#...#.......#.........#.#.#...#.#.#.#.....#.....#...#.#...#.#.#.#...#...#...#...#...#.#.#...........#.#.#  
#   #.#.###.#.#.#########.#########.#.###.###.#.#####.#.###.#.#.#.#.#.###########.#.###.###.###.###.###.###.#.#####.#.#  
#   #.#...#.....#.#...#.#.#.#.#.............#.....#...#...#.#.#.#...#...#.#.#.....#.........#...#.......#...#...#...#.#  
#   ###########.#.#.###.#.#.#.#######.#####.#.#####.#.#######.#####.###.#.#.#####.#.#.###.#####.###.#############.#.#.#  
#   #.#.#.#.#.....#.#.....#.#.#.#.....#...#.#.....#.#.....#...#.#.#...#...#.#.#...#.#...#...#...#...#...#.#.......#.#.#  
#   #.#.#.#.###.###.#####.#.#.#.#####.#.###.#.#########.#######.#.#.###.###.#.#.###.###.#####.#####.#.###.#####.#####.#  
#   #.#...#.#...#.#.#...#...#.#.....#.#.....#.#...#.....#.......#.#.#...#.....#.#.#.#.......#.......#...#.#.#...#.#...#  
#   #.#.#.#.###.#.#.###.#.###.#.#####.#.###.#.###.###.###.#.#.###.#.#.###.#.#.###.#.###.#####.#.#####.###.#.###.#.###.#  
#   #.#.#.#.#...#.#...#...#.#.#...#...#...#.#.#.....#.#...#.#.#.....#.#...#.#.#.......#.......#...#.#.....#.........#.#  
#   #.#.###.###.#.#.#####.#.#.#.###.#.#####.#.#.###.#.###.#.###.#.###.#.###.#####.#####.#####.#####.###.#########.#.#.#  
#   #.....#...#.......#.#.#.......#.#.#...#.#...#.#.#.....#...#.#...#...#.#...#.......#...#.#...#...#...#.#.#.#.#.#.#.#  
#   ###.###.#######.###.#.#.#.#.#########.#.#####.#.#.#####.#######.#####.#.#####.#.#.###.#.#######.###.#.#.#.#.#.###.#  
#   #.....#...#.#.#.......#.#.#.#.#.......#...#.....#.#.....#.......#.......#.#...#.#.#.#...#.....#.#.....#.#.#...#.#.#  
#   ###.###.###.#.#######.#.#####.#####.#.#.###.#########.#.###.#.#####.#####.###.#####.#######.###.###.###.#.#.###.#.#  
#   #.....#.......#...#...#...#.#.#.#.#.#.#.#.......#.#...#.#.#.#...#.......#...#.......#...#.....#...#.#.........#...#  
#   #.#####.#######.###.#.#.###.#.#.#.#.#.#.###.#.###.#.#####.#####.#####.#####.###.#######.###.###.###.#########.#.###  
#   #...#...#...#.#.#...#.#.#.#.........#.....#.#.....#.......#.......#...#.............#...#...#.#.........#...#.#...#  
#   #.###.###.###.#.#####.#.#.#.#####.#############.#######.#####.#####.#######.###########.###.#.###.#######.###.#.###  
#   #...#...#...#...#.#...#...#.#    S             L       B     V     G       R          #.#.#.#.....#.#.......#.#...#  
#   #.###.#.#.#####.#.###.#.###.#    D             M       E     H     X       Q          #.#.#.#####.#.###.#####.#.###  
#   #.....#.#.................#.#                                                         #.........................#.#  
#   #.###.###.#####.#.#.#.###.###                                                         #.#.#.###.#######.###.#.#.#.#  
#   #.#.#.....#.#...#.#.#.#.....#                                                       RZ..#.#...#.....#.#...#.#.#.#..BE
#   #.#.#####.#.#####.#.#####.###                                                         #######.#####.#.#.#######.#.#  
#   #.....#.#.....#.#.#.....#.#.#                                                         #.#.#.#.#.#...#.......#...#.#  
#   ###.###.###.#.#.#.#.###.#.#.#                                                         #.#.#.###.#####.#.#######.#.#  
# RI....#.....#.#.#...#.#.#.#....UW                                                       #.#.......#...#.#.#.#...#...#  
#   #####.###############.###.###                                                         #.###.#####.#.#####.#.#.#####  
#   #.....#.#.#...#.#.....#.#...#                                                       GW..........#.#.........#.#...#  
#   #.###.#.#.#.###.###.###.#####                                                         #.###.#.#.###.#######.###.###  
#   #...#...#.....#.#.......#....FM                                                       #.#...#.#.....#...#.........#  
#   ###.###.#.#.#.#.#.#########.#                                                         ###.#######.###.###########.#  
# AJ..#...#...#.#...#...#.....#.#                                                         #...#.#.#...#...#.#...#.#.#..GX
#   #.#.#########.#.#.#######.#.#                                                         #####.#.#######.#.###.#.#.###  
#   #.....#.#.#.#.#.............#                                                         #...............#...#........DD
#   #######.#.#.###########.###.#                                                         ###.#######.###.#.#.#.#.###.#  
#   #.....................#.#...#                                                         #.......#.....#...#.#.#.#...#  
#   ###.###.#.#.###.#####.#######                                                         #####.#########.###.#.###.###  
# GP..#...#.#.#.#.....#.#...#...#                                                       SG..#...#.....#...#.#.....#...#  
#   #.###.#####.#.#.#.#.###.###.#                                                         #.#.###.#.#######.#######.###  
#   #.#.....#.#.#.#.#.#.....#...#                                                         #.....#.#.#.#...#.#.#...#.#.#  
#   #.#.#####.#########.#######.#                                                         #########.#.###.#.#.#.#####.#  
#   #.....#...#..................SI                                                     DD....#........................UW
#   #.#######.#####.###.###.#####                                                         #.###.#####.#.###.#.###.#####  
#   #.#.#...#...#.....#.#.#.#.#..AJ                                                       #.........#.#.#.#.#.#.....#.#  
#   ###.#.###.#.#########.###.#.#                                                         #.#####.###.#.#.#######.###.#  
#   #.........#.#...#.....#.#.#.#                                                         #...#.....#.#...#.#.#.#.#....LM
#   #########.#.###.#.###.#.#.#.#                                                         #########.#.#.###.#.#.#####.#  
# AA......#.#.#.....#.#...#.....#                                                         #.#.#.#.#.#.#.#...#.#.#.....#  
#   #.#####.#.#.###.#.#.###.#.###                                                         #.#.#.#.#########.#.#.#####.#  
# JO..........#...#...#.....#...#                                                         #.#.......#.#.............#.#  
#   #####.###############.###.#.#                                                         #.#.#.#####.###.###.#.###.#.#  
#   #.#.#...#.........#.#.#.#.#.#                                                       TX....#.............#.#...#...#  
#   #.#.#######.#.#.#.#.###.###.#                                                         #.###.#.###.#####.###########  
# VH......#.....#.#.#.....#...#.#                                                         #.#...#.#...#...#.#.....#...#  
#   #####.#.###########.###.#####                                                         #############.#####.###.#.#.#  
#   #.....#.....#.#.......#.....#                                                         #.#...#...#.#.......#.#.#.#..RZ
#   #.#.#######.#.#######.#.#####                                                         #.###.###.#.###.#.###.#.#.###  
#   #.#...........#.#............FW                                                     RN..#.....#...#.#.#.#.....#...#  
#   #########.###.#.#.###########                                                         #.#.#.###.###.###.#.#####.###  
#   #...#...#.#.....#.#.........#                                                         #...#.............#.......#.#  
#   #.#.#.#################.#.#.#                                                         ###############.###########.#  
# AX..#...#.#...#.#...#...#.#.#..HR                                                     JO............#.#.#...........#  
#   #.#.###.###.#.#.#####.###.#.#                                                         #.#.#####.#.#.###.#.#.#####.#  
# TX..#...#.......#...#.....#.#..EK                                                       #.#...#.#.#.......#.#...#.#..MM
#   ###.#.###.#.#.#.#.###.#.#.###                                                         #.###.#.#######.#.###.###.#.#  
#   #...#.....#.#...#.....#.....#                                                         #.#.#.....#.#...#...#.#.....#  
#   #####.#.#.#####.###.#######.#        R     Y   G           U     A           M S      #.#.#.#.###.#####.#.#.###.#.#  
#   #.....#.#...#.....#.....#...#        I     Q   P           C     X           M Y      #...#.#.#.....#...#.#...#.#.#  
#   #####.#########.###.#####.###########.#####.###.###########.#####.###########.#.#######.#.###.#.#########.#.#####.#  
#   #...#...#.#.......#.....#...#...#.....#.....#.....#.#.....#...#...........#...#...#...#.#.#.....#.#.......#.#.....#  
#   #.#.#.###.###.#.#.#######.#####.###.###.###.#####.#.###.#.#.#########.#####.#####.#.#########.###.###.#####.###.#.#  
#   #.#.......#...#.#.#.......#.....#.#.#.....#.#.....#...#.#.......#.#.#...#.......#.#.......#.#.#.#.....#.......#.#.#  
#   #.#.#.#.#####.###########.#####.#.#.#.#.#.#####.###.###.#########.#.#.#######.###.#.#######.###.###.#.###.#.#.#.#.#  
#   #.#.#.#...#.......#.......#.........#.#.#.....#.#.....#.........#.........#.#.#.....#.......#.......#.#.#.#.#.#.#.#  
#   #######.#.#.#.#####.#.#########.#############.#.#.###.#######.#####.#.#####.#.#.#######.#####.#.#.###.#.#.#######.#  
#   #.......#.#.#...#...#.#.........#.......#...#.#.....#.#.......#.....#...#.....#...........#.#.#.#.#.....#...#.....#  
#   #.#.#.#####.#.#.#####.#.#######.#.###.###.###.#.###.#.#.###.#.#.#.###.#.#####.#.###.#.#.###.###.#.#.#.#####.#####.#  
#   #.#.#.#.....#.#.#.....#...#.#.....#...#.......#.#...#.#...#.#.#.#...#.#.#.....#.#...#.#.......#.#.#.#...#.#.#.....#  
#   #.###.###.#.###.###.#.#.###.#.#.#.#.###.###.#.#######.###.#.###.#######.#.#.#.#####.#.#.#.#############.#.#####.###  
#   #.#.#.#.#.#...#.#...#.#.#.....#.#.#...#...#.#...#.....#...#...#...#.....#.#.#.....#.#.#.#.#.....#.#.#.......#...#.#  
#   ###.#.#.#.#.###.#####.#############.#.#.#.#.#######.###.###.###.#############.#####.#####.###.###.#.#.#####.###.#.#  
#   #.......#.#.#.....#...#.#.......#...#.#.#.#.#.#.#.#...#...#.#.....#.#.#...#.....#.#.#...#...#.......#.....#...#...#  
#   ###.###.#.###.#########.#######.#####.#.#####.#.#.#.###.#######.###.#.#.#####.###.#.#.###.###.#####.#.#.###.###.###  
#   #.....#.#.#.....#.....#.#.......#.#.#.#...#.......#.#.......#...#.....#.......#.........#.#.#.....#.#.#.#...#.....#  
#   #.#####.#.###.#.#####.#.#######.#.#.#.#.#######.#.#.###.#####.#.###.#.###.#.#####.###.#####.#.#######.###.#.#.#.###  
#   #.#.....#.#...#...#.......#.#.....#...#.#.#.....#...#.......#.#.....#.#...#...#.#...#...#.#.#.....#.#.#.#.#.#.#...#  
#   #####.#.#.###.#######.#.###.###.#.#.###.#.#####.#######.#######.#.#####.###.###.###.#####.#.#.#####.###.#######.#.#  
#   #.#.#.#.#.#.#.#...#...#...#.#.#.#...#.......#.#.....#.#.#...#...#.....#.#.......#.........#.#...#.#.........#.#.#.#  
#   #.#.#######.#####.#####.###.#.#.#########.###.#####.#.#.#.#######.#########.#.###.#########.###.#.#.#########.#.#.#  
#   #...#.#.#.#.....#.#...................#...#...#...#...#.....#...#.#...#...#.#.#.....#.#.......#.#.#.#.#.#.#...#.#.#  
#   ###.#.#.#.#.###.#.#####.#############.###.#.#.#.#.###.#.#.#####.#.#.#####.###.#.###.#.#####.###.#.#.#.#.#.###.#.###  
#   #...........#.#.#...#...#.#.......#.#...#...#.#.#...#.#.#...#.#.......#.....#.#...#.#.#.#.#.....#.....#.#.....#...#  
#   #####.#.#.#.#.###.#####.#.#.#.###.#.#.#######.#.###.#.#.###.#.#####.###.###.#.#.###.#.#.#.#.#####.###.#.#.#########  
#   #.#...#.#.#.............#...#...#...#.....#...#...#...#.#.#.#...#...#...#.#...#.#...................#.............#  
#   #.#####.#######.#.###.###.#.#.#####.#.#######.###.#####.#.###.#.#.#####.#.###.#.#.#####.###.#####.###.#.###.#.#####  
#   #.......#.......#...#...#.#.#.#.........#.....#.....#.......#.#.......#.....#.#.#.....#...#.....#...#.#...#.#.....#  
#   ###################################.#######.###.#########.#######.#########.#######.###############################  
#                                      Y       S   R         S       F         F       H                                 
#                                      Q       Y   Q         I       M         W       R                                 '''

donut = np.array([list(row) for row in INPUT.splitlines() if row.strip()])
nb_rows, nb_cols = donut.shape
print(f'{donut.shape=}')
for row in donut:
    print(*row)

possible_gates = tuple([''.join((letter1, letter2)) for letter1 in ascii_uppercase for letter2 in ascii_uppercase])
gates = defaultdict(set)
# find and store the start and end positions, and collect outer gates names and locations
for i in range(nb_cols):
    if (seq := ''.join(donut[:2, i])) == 'AA':
        start_pos = (2, i)
        print(f'{start_pos=}')
    elif seq == 'ZZ':
        end_pos = (2, i)
        print(f'{end_pos=}') 
    elif seq in possible_gates:
        gates[seq].add((2, i))
for i in range(nb_cols):
    if (seq := ''.join(donut[-2:, i])) == 'AA':
        start_pos = (nb_rows-3, i)
        print(f'{start_pos=}')
    elif seq == 'ZZ':
        end_pos = (nb_rows-3, i)
        print(f'{end_pos=}') 
    elif seq in possible_gates:
        gates[seq].add((nb_rows-3, i))
for i in range(nb_rows):
    if (seq := ''.join(donut[i, :2])) == 'AA':
        start_pos = (i, 2)
        print(f'{start_pos=}')
    elif seq == 'ZZ':
        end_pos = (i, 2)
        print(f'{end_pos=}') 
    elif seq in possible_gates:
        gates[seq].add((i, 2))
for i in range(nb_rows):
    if (seq := ''.join(donut[i, -2:])) == 'AA':
        start_pos = (i, nb_cols-3)
        print(f'{start_pos=}')
    elif seq == 'ZZ':
        end_pos = (i, nb_cols-3)
        print(f'{end_pos=}') 
    elif seq in possible_gates:
        gates[seq].add((i, nb_cols-3))

# build the graph
neighbours = defaultdict(set)
# add the 'regular' neighbours (. to . connection)
for row in range(1, nb_rows-1):
    for col in range(1, nb_cols - 1):
        if donut[row, col] != '.': continue
        if donut[row-1, col] == '.': neighbours[(row, col)].add((row-1, col))
        if donut[row+1, col] == '.': neighbours[(row, col)].add((row+1, col))
        if donut[row, col-1] == '.': neighbours[(row, col)].add((row, col-1))
        if donut[row, col+1] == '.': neighbours[(row, col)].add((row, col+1))


# collect gates written top to bottom
for row in range(2, nb_rows-2): 
    for col in range(2, nb_cols-2):
        if (seq := ''.join(donut[row: row+2, col])) in gates:
            gates[seq].add((row-1, col) if donut[row-1, col]=='.' else (row+2, col))

# collect gates written left to right   
for row in range(2, nb_rows-2):
    for col in range(2, nb_cols-2):
        if (seq := ''.join(donut[row, col:col+2])) in gates:
            gates[seq].add((row, col-1) if donut[row, col-1]=='.' else (row, col+1))

# add the spacetime gates neighbours
for gate in gates:
    assert len((gg := gates[gate])) == 2
    gate1, gate2 = tuple(gg)
    neighbours[gate1].add(gate2)
    neighbours[gate2].add(gate1)

# perform the search (not sure this is BFS as the call to recurse gets executed to the end before ietarting I think)
shortest_path_length = float('inf')
visited = set()
current_path = []
# print(f'{gates=}')
# print(f'{neighbours=}')

def recurse(current_pos: tuple[int, int], current_path_length: int, current_path : list[tuple[int, int]]) -> None:
    """Traverses the donut-shaped grid

    Args:
        current_pos (tuple[int, int]): the location of the current position
        current_path_length (int): the nb of steps of the path currently under consideration
    """
    global shortest_path_length
    if (other := [dist for loc, dist in visited if loc == current_pos]):
        if min(other) <= current_path_length:
            donut_ = donut.copy()
            for pos in current_path:
                donut_[pos] = '*'
            for row in donut_:
                print(*row)
            print('\n')
            return
    if current_pos == end_pos:
        if current_path_length < shortest_path_length:
            print(f'new record: {current_path_length}')
            shortest_path_length = current_path_length
        return
    visited.add((current_pos, current_path_length))
    for neigh in neighbours[current_pos]:
        recurse(neigh, current_path_length + 1, current_path + [current_pos])

recurse(start_pos, 0, current_path)
print(shortest_path_length)