"""https://adventofcode.com/2024/day/8"""

import numpy as np
from collections import defaultdict
from itertools import combinations

example_input = """
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............"""

example_input_2 = """
T....#....
...T......
.T....#...
.........#
..#.......
..........
...#......
..........
....#.....
..........""".replace(
    "#", "."
)

example_same_line = """
..1.1......
"""
example_same_col = """.......
.......
.......
.......
..j..k.
.......
.......
..j....
.......
.......
.......
.......
......."""

example_close = """
..aa..."""

actual_input = """
........5..................................e..3...
.......q...........m................e.............
....m.......................................e.....
.........................................C........
.u.m........................8.....................
...........7......9.......8...........F...s.......
6...q..............................s..............
..................................................
..................................................
..................................................
..........9....................F..................
.................................M....D...........
.........U........................................
..q................................8..............
.......9..........................................
0....6.....................e..Qs...............F..
.................................Q...D............
.0.u....................................2.........
..................................................
........u................Q........................
.....E........1...................................
...n....v....................................3....
......u..0................N.......................
............................................z.....
.........7....U.........4.....Z...Q.....D.....V...
..............n1.........f.................2......
E.............................f..............z....
...E........1.Z.......U......................D....
.......n...v....7Z...N............................
..........7..N.....Zf...........................3.
................................b............V....
............4..................................9..
..n...v........................5................2.
.........v.................5.........S............
..........................s.......................
.....U.........4..C.....................S..V......
..................................................
......................c........b............M.....
...........4.Wc....d.......1.....b.....S..........
..E........c............................5......z..
..............w..C....................SM.2........
........................d.........................
...............c......C3..........................
...............w....W.............................
..................................................
.........d.......B....w...........................
....B.....W.......dw..........................M...
...............W......................N...V.......
.B................................................
....................B...............b.............
"""


def solve_p1(inp: str) -> int:
    lines = [list(line.strip()) for line in inp.splitlines() if line.strip()]
    grid = np.array(lines)
    freq_data = defaultdict(list)
    nb_rows, nb_cols = grid.shape
    antinodes: set[tuple[int, int]] = set()
    for r in range(nb_rows):
        for c in range(nb_cols):
            if (frequency := grid[r, c]) != ".":
                freq_data[frequency].append((r, c))
    for frequency, locations in freq_data.items():
        for comb in combinations(locations, 2):
            (r1, c1), (r2, c2) = comb
            (x1, y1), (x2, y2) = (c1, r1), (c2, r2)
            # compute a,b in f(x) = ax + b ie the line drawn by the two points
            # ax1+b=y1
            # ax2+b=y2
            # a(x1-x2)=y1-y2 <=> a =(y1-y2)/(x1-x2)
            a = (y1 - y2) / (x1 - x2)
            b = y1 - a * x1
            proj1 = a * (min(c1, c2) - abs(c1 - c2)) + b, min(c1, c2) - abs(c1 - c2)
            proj2 = a * (max(c1, c2) + abs(c1 - c2)) + b, max(c1, c2) + abs(c1 - c2)
            if 0 <= proj1[0] < nb_rows and 0 <= proj1[1] < nb_cols:
                antinodes.add(proj1)
            if 0 <= proj2[0] < nb_rows and 0 <= proj2[1] < nb_cols:
                antinodes.add(proj2)
    print(len(antinodes))
    return len(antinodes)


def solve_p2(inp: str) -> int:
    lines = [list(line.strip()) for line in inp.splitlines() if line.strip()]
    grid = np.array(lines)
    freq_data = defaultdict(list)
    nb_rows, nb_cols = grid.shape
    antinodes: set[tuple[int, int]] = set()
    for r in range(nb_rows):
        for c in range(nb_cols):
            if (frequency := grid[r, c]) not in ".":
                freq_data[frequency].append((r, c))

    for frequency, locations in freq_data.items():
        for comb in combinations(locations, 2):
            (r1, c1), (r2, c2) = comb
            offset = (r1 - r2, c1 - c2)
            # I had rounding issues when using a and b coeffs like in part 1, sounder to use the exact offset
            c = 0
            while (
                0 <= (new_r := r1 + c * offset[0]) < nb_rows
                and 0 <= (new_c := c1 + c * offset[1]) < nb_cols
            ):
                antinodes.add((new_r, new_c))
                c += 1
            c = 1  # no need to start at 0 here as we already added the antennas in previous while loop
            while (
                0 <= (new_r := r1 - c * offset[0]) < nb_rows
                and 0 <= (new_c := c1 - c * offset[1]) < nb_cols
            ):
                antinodes.add((new_r, new_c))
                c += 1
    print(len(antinodes))
    return len(antinodes)


if __name__ == "__main__":
    assert solve_p1(example_input) == 14
    solve_p1(actual_input)
    assert solve_p2(example_input_2) == 9
    assert solve_p2(example_input) == 34
    assert solve_p2(example_same_line) == 6
    assert solve_p2(example_close) == 7
    assert solve_p2(example_same_col)==4
    solve_p2(actual_input)
