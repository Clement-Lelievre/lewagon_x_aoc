"""2019 day 20: path finding, recursion, Breadth-First Search, using a queue,
some Numpy manipulation etc."""
from collections import defaultdict, deque
from string import ascii_uppercase
import numpy as np

INPUT = """
         A           
         A           
  #######.#########  
  #######.........#  
  #######.#######.#  
  #######.#######.#  
  #######.#######.#  
  #####  B    ###.#  
BC...##  C    ###.#  
  ##.##       ###.#  
  ##...DE  F  ###.#  
  #####    G  ###.#  
  #########.#####.#  
DE..#######...###.#  
  #.#########.###.#  
FG..#########.....#  
  ###########.#####  
             Z       
             Z       """


INPUT = """
                   A               
                   A               
  #################.#############  
  #.#...#...................#.#.#  
  #.#.#.###.###.###.#########.#.#  
  #.#.#.......#...#.....#.#.#...#  
  #.#########.###.#####.#.#.###.#  
  #.............#.#.....#.......#  
  ###.###########.###.#####.#.#.#  
  #.....#        A   C    #.#.#.#  
  #######        S   P    #####.#  
  #.#...#                 #......VT
  #.#.#.#                 #.#####  
  #...#.#               YN....#.#  
  #.###.#                 #####.#  
DI....#.#                 #.....#  
  #####.#                 #.###.#  
ZZ......#               QG....#..AS
  ###.###                 #######  
JO..#.#.#                 #.....#  
  #.#.#.#                 ###.#.#  
  #...#..DI             BU....#..LF
  #####.#                 #.#####  
YN......#               VT..#....QG
  #.###.#                 #.###.#  
  #.#...#                 #.....#  
  ###.###    J L     J    #.#.###  
  #.....#    O F     P    #.#...#  
  #.###.#####.#.#####.#####.###.#  
  #...#.#.#...#.....#.....#.#...#  
  #.#####.###.###.#.#.#########.#  
  #...#.#.....#...#.#.#.#.....#.#  
  #.###.#####.###.###.#.#.#######  
  #.#.........#...#.............#  
  #########.###.###.#############  
           B   J   C               
           U   P   P               
"""

# INPUT = """
#                                    G           R   U       E         Z S       S
#                                    W           N   C       K         Z G       D
#   #################################.###########.###.#######.#########.#.#######.#####################################
#   #.#.......#.#.........#.#.#.....#.#.....#.#.#...#.....#.........#.....#...#.#...........#.......#.....#.....#.#...#
#   #.#####.###.###.###.#.#.#.###.###.#.###.#.#.###.#.###.###.#####.#.###.###.#.###.#########.###.###.#######.###.#.###
#   #.#.#.#...#...#.#.#.#.................#.#...#...#.#.#...#.#.....#.#.#.#.....................#.#.......#.........#.#
#   #.#.#.#.###.#####.#########.###########.#.#.#.###.#.#######.###.#.#.#####.###.#.###.#.###.#.###.#######.#######.#.#
#   #...#...#.#.#.#.........#...#...#.......#.#...#.......#.....#.#.#.....#.....#.#...#.#.#...#.#...#.#.........#.#.#.#
#   #.#.###.#.#.#.#####.#.#.#######.#.#######.###.#.###.#####.###.#####.#.###.#########.#.#.#######.#.#####.#####.#.#.#
#   #.#...#.#.#.#.#.....#.#.................#.#...#.#.#.....#...#.#.#...#...#.#.....#.#.#.#...#.#.#...........#.#.....#
#   ###.###.#.#.#.#.#.#####.#.###.#########.#.#######.#.#####.###.#.#.#.#####.#.#.###.#.#######.#.#.###.#######.###.#.#
#   #...#.......#...#.#.#.#.#...#.#.........#.....#.......#.#.......#.#...#.....#.....#.#...#.........#...#.#.#.#.#.#.#
#   ###.#######.#######.#.###########.#.#####.###.#####.###.#.#####.#.###.#.#.###.#.#######.###.#####.#####.#.#.#.#####
#   #.......#.#...#.......#.........#.#.#...#.#.#.#.....#.....#...#.#...#.#.#.#...#...#...#...#...#.#.#...........#.#.#
#   #.#.###.#.#.#########.#########.#.###.###.#.#####.#.###.#.#.#.#.#.###########.#.###.###.###.###.###.###.#.#####.#.#
#   #.#...#.....#.#...#.#.#.#.#.............#.....#...#...#.#.#.#...#...#.#.#.....#.........#...#.......#...#...#...#.#
#   ###########.#.#.###.#.#.#.#######.#####.#.#####.#.#######.#####.###.#.#.#####.#.#.###.#####.###.#############.#.#.#
#   #.#.#.#.#.....#.#.....#.#.#.#.....#...#.#.....#.#.....#...#.#.#...#...#.#.#...#.#...#...#...#...#...#.#.......#.#.#
#   #.#.#.#.###.###.#####.#.#.#.#####.#.###.#.#########.#######.#.#.###.###.#.#.###.###.#####.#####.#.###.#####.#####.#
#   #.#...#.#...#.#.#...#...#.#.....#.#.....#.#...#.....#.......#.#.#...#.....#.#.#.#.......#.......#...#.#.#...#.#...#
#   #.#.#.#.###.#.#.###.#.###.#.#####.#.###.#.###.###.###.#.#.###.#.#.###.#.#.###.#.###.#####.#.#####.###.#.###.#.###.#
#   #.#.#.#.#...#.#...#...#.#.#...#...#...#.#.#.....#.#...#.#.#.....#.#...#.#.#.......#.......#...#.#.....#.........#.#
#   #.#.###.###.#.#.#####.#.#.#.###.#.#####.#.#.###.#.###.#.###.#.###.#.###.#####.#####.#####.#####.###.#########.#.#.#
#   #.....#...#.......#.#.#.......#.#.#...#.#...#.#.#.....#...#.#...#...#.#...#.......#...#.#...#...#...#.#.#.#.#.#.#.#
#   ###.###.#######.###.#.#.#.#.#########.#.#####.#.#.#####.#######.#####.#.#####.#.#.###.#.#######.###.#.#.#.#.#.###.#
#   #.....#...#.#.#.......#.#.#.#.#.......#...#.....#.#.....#.......#.......#.#...#.#.#.#...#.....#.#.....#.#.#...#.#.#
#   ###.###.###.#.#######.#.#####.#####.#.#.###.#########.#.###.#.#####.#####.###.#####.#######.###.###.###.#.#.###.#.#
#   #.....#.......#...#...#...#.#.#.#.#.#.#.#.......#.#...#.#.#.#...#.......#...#.......#...#.....#...#.#.........#...#
#   #.#####.#######.###.#.#.###.#.#.#.#.#.#.###.#.###.#.#####.#####.#####.#####.###.#######.###.###.###.#########.#.###
#   #...#...#...#.#.#...#.#.#.#.........#.....#.#.....#.......#.......#...#.............#...#...#.#.........#...#.#...#
#   #.###.###.###.#.#####.#.#.#.#####.#############.#######.#####.#####.#######.###########.###.#.###.#######.###.#.###
#   #...#...#...#...#.#...#...#.#    S             L       B     V     G       R          #.#.#.#.....#.#.......#.#...#
#   #.###.#.#.#####.#.###.#.###.#    D             M       E     H     X       Q          #.#.#.#####.#.###.#####.#.###
#   #.....#.#.................#.#                                                         #.........................#.#
#   #.###.###.#####.#.#.#.###.###                                                         #.#.#.###.#######.###.#.#.#.#
#   #.#.#.....#.#...#.#.#.#.....#                                                       RZ..#.#...#.....#.#...#.#.#.#..BE
#   #.#.#####.#.#####.#.#####.###                                                         #######.#####.#.#.#######.#.#
#   #.....#.#.....#.#.#.....#.#.#                                                         #.#.#.#.#.#...#.......#...#.#
#   ###.###.###.#.#.#.#.###.#.#.#                                                         #.#.#.###.#####.#.#######.#.#
# RI....#.....#.#.#...#.#.#.#....UW                                                       #.#.......#...#.#.#.#...#...#
#   #####.###############.###.###                                                         #.###.#####.#.#####.#.#.#####
#   #.....#.#.#...#.#.....#.#...#                                                       GW..........#.#.........#.#...#
#   #.###.#.#.#.###.###.###.#####                                                         #.###.#.#.###.#######.###.###
#   #...#...#.....#.#.......#....FM                                                       #.#...#.#.....#...#.........#
#   ###.###.#.#.#.#.#.#########.#                                                         ###.#######.###.###########.#
# AJ..#...#...#.#...#...#.....#.#                                                         #...#.#.#...#...#.#...#.#.#..GX
#   #.#.#########.#.#.#######.#.#                                                         #####.#.#######.#.###.#.#.###
#   #.....#.#.#.#.#.............#                                                         #...............#...#........DD
#   #######.#.#.###########.###.#                                                         ###.#######.###.#.#.#.#.###.#
#   #.....................#.#...#                                                         #.......#.....#...#.#.#.#...#
#   ###.###.#.#.###.#####.#######                                                         #####.#########.###.#.###.###
# GP..#...#.#.#.#.....#.#...#...#                                                       SG..#...#.....#...#.#.....#...#
#   #.###.#####.#.#.#.#.###.###.#                                                         #.#.###.#.#######.#######.###
#   #.#.....#.#.#.#.#.#.....#...#                                                         #.....#.#.#.#...#.#.#...#.#.#
#   #.#.#####.#########.#######.#                                                         #########.#.###.#.#.#.#####.#
#   #.....#...#..................SI                                                     DD....#........................UW
#   #.#######.#####.###.###.#####                                                         #.###.#####.#.###.#.###.#####
#   #.#.#...#...#.....#.#.#.#.#..AJ                                                       #.........#.#.#.#.#.#.....#.#
#   ###.#.###.#.#########.###.#.#                                                         #.#####.###.#.#.#######.###.#
#   #.........#.#...#.....#.#.#.#                                                         #...#.....#.#...#.#.#.#.#....LM
#   #########.#.###.#.###.#.#.#.#                                                         #########.#.#.###.#.#.#####.#
# AA......#.#.#.....#.#...#.....#                                                         #.#.#.#.#.#.#.#...#.#.#.....#
#   #.#####.#.#.###.#.#.###.#.###                                                         #.#.#.#.#########.#.#.#####.#
# JO..........#...#...#.....#...#                                                         #.#.......#.#.............#.#
#   #####.###############.###.#.#                                                         #.#.#.#####.###.###.#.###.#.#
#   #.#.#...#.........#.#.#.#.#.#                                                       TX....#.............#.#...#...#
#   #.#.#######.#.#.#.#.###.###.#                                                         #.###.#.###.#####.###########
# VH......#.....#.#.#.....#...#.#                                                         #.#...#.#...#...#.#.....#...#
#   #####.#.###########.###.#####                                                         #############.#####.###.#.#.#
#   #.....#.....#.#.......#.....#                                                         #.#...#...#.#.......#.#.#.#..RZ
#   #.#.#######.#.#######.#.#####                                                         #.###.###.#.###.#.###.#.#.###
#   #.#...........#.#............FW                                                     RN..#.....#...#.#.#.#.....#...#
#   #########.###.#.#.###########                                                         #.#.#.###.###.###.#.#####.###
#   #...#...#.#.....#.#.........#                                                         #...#.............#.......#.#
#   #.#.#.#################.#.#.#                                                         ###############.###########.#
# AX..#...#.#...#.#...#...#.#.#..HR                                                     JO............#.#.#...........#
#   #.#.###.###.#.#.#####.###.#.#                                                         #.#.#####.#.#.###.#.#.#####.#
# TX..#...#.......#...#.....#.#..EK                                                       #.#...#.#.#.......#.#...#.#..MM
#   ###.#.###.#.#.#.#.###.#.#.###                                                         #.###.#.#######.#.###.###.#.#
#   #...#.....#.#...#.....#.....#                                                         #.#.#.....#.#...#...#.#.....#
#   #####.#.#.#####.###.#######.#        R     Y   G           U     A           M S      #.#.#.#.###.#####.#.#.###.#.#
#   #.....#.#...#.....#.....#...#        I     Q   P           C     X           M Y      #...#.#.#.....#...#.#...#.#.#
#   #####.#########.###.#####.###########.#####.###.###########.#####.###########.#.#######.#.###.#.#########.#.#####.#
#   #...#...#.#.......#.....#...#...#.....#.....#.....#.#.....#...#...........#...#...#...#.#.#.....#.#.......#.#.....#
#   #.#.#.###.###.#.#.#######.#####.###.###.###.#####.#.###.#.#.#########.#####.#####.#.#########.###.###.#####.###.#.#
#   #.#.......#...#.#.#.......#.....#.#.#.....#.#.....#...#.#.......#.#.#...#.......#.#.......#.#.#.#.....#.......#.#.#
#   #.#.#.#.#####.###########.#####.#.#.#.#.#.#####.###.###.#########.#.#.#######.###.#.#######.###.###.#.###.#.#.#.#.#
#   #.#.#.#...#.......#.......#.........#.#.#.....#.#.....#.........#.........#.#.#.....#.......#.......#.#.#.#.#.#.#.#
#   #######.#.#.#.#####.#.#########.#############.#.#.###.#######.#####.#.#####.#.#.#######.#####.#.#.###.#.#.#######.#
#   #.......#.#.#...#...#.#.........#.......#...#.#.....#.#.......#.....#...#.....#...........#.#.#.#.#.....#...#.....#
#   #.#.#.#####.#.#.#####.#.#######.#.###.###.###.#.###.#.#.###.#.#.#.###.#.#####.#.###.#.#.###.###.#.#.#.#####.#####.#
#   #.#.#.#.....#.#.#.....#...#.#.....#...#.......#.#...#.#...#.#.#.#...#.#.#.....#.#...#.#.......#.#.#.#...#.#.#.....#
#   #.###.###.#.###.###.#.#.###.#.#.#.#.###.###.#.#######.###.#.###.#######.#.#.#.#####.#.#.#.#############.#.#####.###
#   #.#.#.#.#.#...#.#...#.#.#.....#.#.#...#...#.#...#.....#...#...#...#.....#.#.#.....#.#.#.#.#.....#.#.#.......#...#.#
#   ###.#.#.#.#.###.#####.#############.#.#.#.#.#######.###.###.###.#############.#####.#####.###.###.#.#.#####.###.#.#
#   #.......#.#.#.....#...#.#.......#...#.#.#.#.#.#.#.#...#...#.#.....#.#.#...#.....#.#.#...#...#.......#.....#...#...#
#   ###.###.#.###.#########.#######.#####.#.#####.#.#.#.###.#######.###.#.#.#####.###.#.#.###.###.#####.#.#.###.###.###
#   #.....#.#.#.....#.....#.#.......#.#.#.#...#.......#.#.......#...#.....#.......#.........#.#.#.....#.#.#.#...#.....#
#   #.#####.#.###.#.#####.#.#######.#.#.#.#.#######.#.#.###.#####.#.###.#.###.#.#####.###.#####.#.#######.###.#.#.#.###
#   #.#.....#.#...#...#.......#.#.....#...#.#.#.....#...#.......#.#.....#.#...#...#.#...#...#.#.#.....#.#.#.#.#.#.#...#
#   #####.#.#.###.#######.#.###.###.#.#.###.#.#####.#######.#######.#.#####.###.###.###.#####.#.#.#####.###.#######.#.#
#   #.#.#.#.#.#.#.#...#...#...#.#.#.#...#.......#.#.....#.#.#...#...#.....#.#.......#.........#.#...#.#.........#.#.#.#
#   #.#.#######.#####.#####.###.#.#.#########.###.#####.#.#.#.#######.#########.#.###.#########.###.#.#.#########.#.#.#
#   #...#.#.#.#.....#.#...................#...#...#...#...#.....#...#.#...#...#.#.#.....#.#.......#.#.#.#.#.#.#...#.#.#
#   ###.#.#.#.#.###.#.#####.#############.###.#.#.#.#.###.#.#.#####.#.#.#####.###.#.###.#.#####.###.#.#.#.#.#.###.#.###
#   #...........#.#.#...#...#.#.......#.#...#...#.#.#...#.#.#...#.#.......#.....#.#...#.#.#.#.#.....#.....#.#.....#...#
#   #####.#.#.#.#.###.#####.#.#.#.###.#.#.#######.#.###.#.#.###.#.#####.###.###.#.#.###.#.#.#.#.#####.###.#.#.#########
#   #.#...#.#.#.............#...#...#...#.....#...#...#...#.#.#.#...#...#...#.#...#.#...................#.............#
#   #.#####.#######.#.###.###.#.#.#####.#.#######.###.#####.#.###.#.#.#####.#.###.#.#.#####.###.#####.###.#.###.#.#####
#   #.......#.......#...#...#.#.#.#.........#.....#.....#.......#.#.......#.....#.#.#.....#...#.....#...#.#...#.#.....#
#   ###################################.#######.###.#########.#######.#########.#######.###############################
#                                      Y       S   R         S       F         F       H
#                                      Q       Y   Q         I       M         W       R                                 """


# process the input grid
donut = np.array([list(row) for row in INPUT.splitlines() if row.strip()])
nb_rows, nb_cols = donut.shape
print(f"{donut.shape=}")
# print the grid
for row in donut:
    print(*row)

possible_gates = tuple(
    [
        "".join((letter1, letter2))
        for letter1 in ascii_uppercase
        for letter2 in ascii_uppercase
    ]
)  # using a tuple is not mandatory, it's done to express better the intent: this is immutable
gates = defaultdict(set)
# find and store the start and end positions, and collect outer gates names and locations
for i in range(nb_cols):
    if (seq := "".join(donut[:2, i])) == "AA":
        start_pos = (2, i)
        print(f"{start_pos=}")
    elif seq == "ZZ":
        end_pos = (2, i)
        print(f"{end_pos=}")
    elif seq in possible_gates:
        gates[seq].add((2, i))
for i in range(nb_cols):
    if (seq := "".join(donut[-2:, i])) == "AA":
        start_pos = (nb_rows - 3, i)
        print(f"{start_pos=}")
    elif seq == "ZZ":
        end_pos = (nb_rows - 3, i)
        print(f"{end_pos=}")
    elif seq in possible_gates:
        gates[seq].add((nb_rows - 3, i))
for i in range(nb_rows):
    if (seq := "".join(donut[i, :2])) == "AA":
        start_pos = (i, 2)
        print(f"{start_pos=}")
    elif seq == "ZZ":
        end_pos = (i, 2)
        print(f"{end_pos=}")
    elif seq in possible_gates:
        gates[seq].add((i, 2))
for i in range(nb_rows):
    if (seq := "".join(donut[i, -2:])) == "AA":
        start_pos = (i, nb_cols - 3)
        print(f"{start_pos=}")
    elif seq == "ZZ":
        end_pos = (i, nb_cols - 3)
        print(f"{end_pos=}")
    elif seq in possible_gates:
        gates[seq].add((i, nb_cols - 3))

# build the graph
neighbours = defaultdict(set)
# add the 'regular' neighbours (. to . connection)
for row in range(1, nb_rows - 1):
    for col in range(1, nb_cols - 1):
        if donut[row, col] != ".":
            continue
        if donut[row - 1, col] == ".":
            neighbours[(row, col)].add((row - 1, col))
        if donut[row + 1, col] == ".":
            neighbours[(row, col)].add((row + 1, col))
        if donut[row, col - 1] == ".":
            neighbours[(row, col)].add((row, col - 1))
        if donut[row, col + 1] == ".":
            neighbours[(row, col)].add((row, col + 1))

# collect inner gates written top to bottom
for row in range(2, nb_rows - 2):
    for col in range(2, nb_cols - 2):
        if (seq := "".join(donut[row : row + 2, col])) in gates:
            gates[seq].add(
                (row - 1, col) if donut[row - 1, col] == "." else (row + 2, col)
            )

# collect inner gates written left to right
for row in range(2, nb_rows - 2):
    for col in range(2, nb_cols - 2):
        if (seq := "".join(donut[row, col : col + 2])) in gates:
            gates[seq].add(
                (row, col - 1) if donut[row, col - 1] == "." else (row, col + 2)
            )

# add the spacetime gates neighbours
for gate in gates:
    assert len((gg := gates[gate])) == 2
    gate1, gate2 = tuple(gg)
    neighbours[gate1].add(gate2)
    neighbours[gate2].add(gate1)

# perform the search with a recursive function
shortest_path_length = float("inf")
visited = set()


def recurse(current_pos: tuple[int, int], current_path_length: int) -> None:
    """Traverses the donut-shaped grid

    Args:
        current_pos (tuple[int, int]): the location of the current position
        current_path_length (int): the nb of steps of the current path
    """
    global shortest_path_length
    if (
        min((dist for loc, dist in visited if loc == current_pos), default=float("inf"))
        <= current_path_length
    ):
        return
    if current_pos == end_pos:
        if current_path_length < shortest_path_length:
            shortest_path_length = current_path_length
        return
    visited.add((current_pos, current_path_length))
    for neigh in neighbours[current_pos]:
        recurse(neigh, current_path_length + 1)


# note: the above recursive function works on both examples provided and is likely correct,
# however it raises a RecursionError when run on my actual input: the graph is likely too large,
# so instead I'll use BFS with a queue (see below)
try:
    recurse(start_pos, 0)
    print(f"Part 1 recursive solution: {shortest_path_length}")
except RecursionError:
    print("This grid is too large and triggers too many calls")

# perform the search with a BFS
class Node:
    """A node in the graph, where one can walk"""

    def __init__(self, location: tuple[int, int]) -> None:
        self.distance = float("inf")
        self.visited = False
        self.location = location
        self.neighbours = neighbours[self.location]


queue = deque()  # more efficient than a Python list ( O(1) popping vs O(n) for a list)
nodes = set(map(Node, neighbours))
st = Node(start_pos)
st.distance = 0
queue.append(st)
while queue:
    current_node: Node = queue.popleft()
    for neigh in nodes:
        if neigh.location in current_node.neighbours and not neigh.visited:
            neigh.distance = current_node.distance + 1
            queue.append(neigh)
    current_node.visited = True
    if current_node.location == end_pos:
        print(f"Part 1 with BFS: {current_node.distance}")
        break
else:
    raise ValueError("Impossible to solve")