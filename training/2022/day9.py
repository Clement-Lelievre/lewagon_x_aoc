from copy import deepcopy

INPUT = """U 1
R 1
L 1
D 1
R 1
L 1
D 1
L 2
D 1
R 1
D 2
L 1
R 1
D 2
U 2
L 1
R 1
U 1
D 1
R 1
L 2
R 2
L 1
R 2
D 1
U 1
R 1
L 2
R 2
D 2
U 1
L 2
D 2
U 2
L 2
U 1
R 1
L 1
D 2
L 1
U 2
L 1
D 1
U 2
R 2
U 1
D 2
U 2
D 1
L 2
R 1
D 1
R 1
D 2
L 1
U 2
D 1
L 2
U 1
D 1
L 2
R 2
D 2
L 2
U 1
D 1
L 2
U 2
L 2
U 2
R 1
L 1
R 2
D 2
R 1
L 2
R 1
D 1
R 1
U 2
D 2
L 1
U 2
D 2
L 2
U 1
R 1
D 1
U 1
R 1
L 2
U 2
L 1
R 2
L 2
D 2
U 1
D 2
U 1
L 1
U 2
D 2
R 1
D 1
L 2
R 2
D 1
L 1
R 1
U 1
L 2
R 2
U 1
R 3
D 2
U 2
L 3
R 3
D 3
U 3
R 1
D 2
R 1
D 1
L 2
R 3
D 3
U 3
D 3
R 1
U 2
D 3
L 3
R 2
L 2
D 3
U 2
D 1
R 3
D 1
U 1
L 2
D 1
U 1
L 1
D 1
R 3
D 2
L 1
R 1
L 2
U 3
L 1
U 1
L 3
R 3
L 3
R 2
D 2
R 1
U 2
R 1
D 3
U 3
L 1
U 2
D 3
R 2
D 1
U 1
D 1
R 3
U 1
R 2
L 1
D 1
U 1
R 2
L 1
U 3
L 1
R 1
U 3
L 3
D 2
R 2
D 1
L 3
R 3
D 1
L 2
U 3
D 1
U 1
R 1
L 1
U 2
D 2
R 3
U 3
R 1
U 2
D 2
R 2
D 2
R 1
L 2
D 1
U 2
L 3
U 2
D 3
L 2
R 1
D 1
L 1
U 2
D 1
L 3
R 2
D 2
R 3
L 3
D 3
U 1
R 1
L 3
R 2
L 1
U 2
L 4
D 1
L 4
D 3
L 3
D 2
U 3
L 3
D 4
U 4
D 4
L 3
D 1
R 4
D 4
R 2
L 3
D 4
R 3
D 3
R 3
L 4
U 3
R 1
D 4
U 2
R 3
U 2
L 4
R 3
L 2
R 4
L 2
R 4
U 2
R 4
U 3
L 3
D 4
R 3
U 4
R 3
D 4
U 2
D 4
U 1
R 1
U 3
D 4
U 2
D 3
L 2
U 4
L 1
U 1
L 1
U 3
R 2
U 1
R 3
D 1
U 2
R 1
U 4
D 3
L 4
U 4
R 1
D 2
L 4
R 3
U 2
L 1
U 1
L 2
U 4
D 1
L 3
R 3
L 3
R 4
L 2
R 4
U 2
D 3
R 4
L 3
R 1
L 3
D 4
L 1
R 4
U 3
R 3
L 4
D 3
R 4
L 4
R 2
L 4
D 4
R 4
D 4
R 4
L 3
D 1
U 4
R 5
L 3
R 3
L 1
R 3
D 3
U 5
R 2
U 4
D 1
R 3
D 1
R 3
U 5
D 5
U 5
L 2
D 1
U 3
L 5
R 1
D 5
L 3
U 5
L 3
R 5
L 1
U 3
D 1
L 5
R 2
U 5
L 1
D 1
U 1
D 5
L 2
U 4
R 2
D 1
U 3
L 3
D 1
R 4
D 3
U 2
D 3
R 5
U 5
D 1
L 3
U 2
R 2
D 3
U 5
R 1
L 4
D 3
R 3
D 4
L 3
D 5
R 5
D 3
R 1
U 3
R 1
L 3
D 3
L 3
D 1
R 1
U 4
D 4
R 2
D 4
L 4
U 5
L 2
R 5
D 5
R 1
D 1
R 1
L 1
R 4
U 4
L 2
R 2
L 5
D 3
R 5
L 5
D 2
R 1
D 2
R 2
L 1
U 1
R 5
U 4
D 2
U 3
D 3
R 4
L 2
D 5
U 5
L 5
R 4
D 1
U 3
R 3
L 6
U 6
R 6
L 2
D 2
U 3
R 4
D 2
L 1
R 1
L 1
R 1
L 4
U 2
D 2
U 4
R 1
L 3
U 1
L 3
U 1
L 3
D 6
U 5
D 2
L 3
D 4
L 3
U 5
D 4
R 3
L 2
U 6
L 3
D 5
L 3
R 2
D 3
R 1
U 4
D 2
U 3
R 5
D 1
R 1
U 5
L 3
U 6
R 1
U 1
R 2
L 3
D 5
R 1
U 5
L 4
D 4
R 5
L 6
R 4
U 3
R 5
U 2
D 4
R 1
U 1
L 6
D 3
L 5
U 4
R 1
D 5
U 3
D 3
R 6
L 3
D 4
U 6
L 3
D 3
L 2
U 1
R 3
D 1
L 3
U 3
R 2
D 2
L 1
R 4
D 6
U 6
R 4
D 6
R 5
D 2
U 1
L 5
D 6
L 2
U 3
D 2
R 4
L 6
U 6
L 3
D 4
L 2
U 3
R 6
D 5
R 7
L 3
D 4
R 5
U 5
L 2
D 6
R 1
D 1
L 6
D 4
U 2
D 4
R 7
L 1
U 4
R 4
D 4
U 5
D 2
L 2
R 6
U 6
R 4
L 6
U 1
R 7
U 3
L 1
R 2
L 4
D 2
U 6
R 1
U 2
L 6
U 6
L 6
U 7
L 3
D 7
L 7
D 6
U 2
R 6
L 7
R 4
D 4
R 2
U 1
D 7
U 6
L 2
D 7
U 2
R 7
U 6
D 3
L 5
U 2
D 4
R 4
U 1
D 2
L 1
R 2
U 6
R 2
U 2
D 2
L 1
U 7
R 6
L 1
R 2
D 1
R 2
L 5
U 7
R 7
U 3
D 1
R 6
L 6
U 1
D 4
R 4
L 1
R 4
U 6
D 7
L 2
R 6
L 1
D 2
R 2
L 4
D 3
U 4
L 5
R 1
L 3
U 2
D 1
U 3
R 7
D 2
U 2
L 7
R 7
D 2
R 4
L 8
R 2
L 5
D 6
L 8
R 3
D 3
R 1
D 6
U 5
R 5
U 8
R 7
U 2
L 2
R 5
L 1
U 6
D 7
R 7
U 5
R 7
L 4
R 4
U 8
L 3
U 2
D 2
U 1
R 1
U 7
D 3
R 2
D 5
U 7
L 8
R 4
L 5
D 1
U 7
D 3
R 7
U 1
R 6
U 4
L 8
R 8
U 5
L 5
U 3
L 7
D 5
U 5
R 8
U 1
D 1
U 1
R 7
D 2
U 2
D 5
L 4
D 4
U 5
L 2
R 5
U 7
R 6
U 5
L 1
D 2
U 8
L 7
D 2
R 2
D 6
U 1
D 3
L 2
D 7
R 3
D 2
U 6
D 6
U 7
L 2
R 8
U 2
D 4
L 3
R 3
D 7
L 5
U 7
R 2
L 8
R 8
L 1
D 6
L 2
U 6
L 8
D 5
R 8
U 1
R 4
D 1
L 7
U 2
D 9
L 5
U 2
D 8
L 6
D 9
U 9
R 1
D 8
L 8
D 9
U 3
R 4
U 6
D 9
L 3
R 1
U 5
L 5
D 5
L 8
D 1
U 9
L 4
D 3
L 9
R 5
L 9
D 5
L 2
U 7
R 6
D 4
U 8
L 7
D 7
U 5
L 9
R 3
L 9
U 4
L 4
R 7
L 5
R 2
D 1
U 2
R 3
L 5
R 9
L 3
D 9
L 9
U 5
D 3
U 6
D 3
L 3
U 5
D 1
R 1
L 8
R 1
D 6
R 2
U 6
L 6
R 3
D 2
R 4
U 6
R 8
U 4
D 8
R 1
U 8
D 4
L 9
U 8
L 2
U 1
R 2
D 7
R 1
D 9
R 3
L 6
U 6
L 2
R 7
U 5
R 8
L 3
D 5
R 3
U 9
D 5
R 5
U 1
L 6
D 2
R 2
D 3
L 2
U 2
L 5
U 9
L 8
D 2
U 7
R 6
U 3
L 8
U 5
D 4
U 4
R 2
D 1
L 7
U 4
R 1
L 3
D 7
R 5
D 8
R 4
U 3
L 3
D 3
U 5
L 3
D 1
R 10
D 4
U 6
D 4
R 7
U 5
L 2
R 5
D 8
R 3
U 6
R 5
L 9
R 7
D 6
U 10
R 10
D 5
R 9
U 4
R 6
L 8
U 5
L 9
R 8
D 2
U 5
D 4
R 3
D 10
U 9
L 5
U 5
L 10
D 7
U 4
D 10
U 1
D 8
L 6
D 9
R 5
U 2
R 3
U 1
D 8
R 3
U 4
D 6
U 10
D 4
U 3
D 5
R 1
L 8
R 9
D 2
U 8
L 1
R 8
U 5
R 9
U 9
R 7
D 5
L 5
D 8
L 7
U 1
L 4
D 2
R 3
D 1
U 2
L 1
D 1
U 6
R 5
U 5
R 6
L 1
U 5
R 5
U 8
L 9
D 2
R 10
U 2
R 6
U 8
R 2
L 11
U 3
D 4
R 6
L 8
R 10
U 10
R 6
L 4
R 11
U 11
R 3
U 11
L 7
R 4
L 7
U 5
D 2
U 8
R 9
D 9
R 1
U 9
D 6
U 3
D 10
L 7
D 8
R 9
U 9
D 7
L 11
D 8
R 8
U 11
L 11
U 4
D 6
R 1
D 8
R 2
U 1
L 11
R 10
L 6
U 8
L 10
U 5
L 11
U 6
L 5
U 10
R 5
U 11
R 6
D 4
U 7
L 11
D 3
U 8
R 8
L 2
D 10
L 5
D 10
R 4
U 3
L 7
U 10
D 4
U 10
R 2
U 1
D 6
L 6
U 7
D 4
R 6
D 11
L 1
U 5
L 1
D 9
R 11
L 8
D 3
U 7
R 9
D 1
U 3
R 1
L 8
D 6
U 9
D 9
L 10
U 8
D 5
L 1
U 2
D 3
L 11
R 3
L 7
D 1
U 8
D 5
L 8
R 7
L 8
D 4
R 7
D 11
R 3
L 1
R 6
U 3
R 11
L 5
R 4
L 1
D 6
R 7
U 2
L 2
R 11
L 1
D 4
L 5
U 3
R 9
U 4
D 10
U 3
R 10
L 4
R 7
D 9
U 11
D 10
R 5
U 6
L 3
R 5
D 1
R 3
L 10
D 4
U 8
R 9
U 5
R 6
U 3
D 2
R 6
U 3
L 3
R 8
L 9
D 6
U 7
D 11
U 12
R 7
D 7
U 12
L 6
U 6
D 3
L 11
R 8
U 10
L 7
R 2
U 8
L 3
R 12
D 4
L 4
U 10
L 9
R 8
L 12
D 3
R 4
L 9
U 4
L 6
D 11
U 3
R 7
U 3
D 3
U 4
L 12
R 11
U 5
D 3
R 7
U 1
D 11
R 7
L 3
R 6
U 10
L 11
U 2
L 11
U 11
R 8
D 12
U 4
L 1
D 3
R 6
L 2
U 4
D 3
R 8
L 2
D 9
L 9
U 8
R 12
D 7
U 13
R 7
L 10
U 6
L 11
D 6
U 13
R 4
U 8
D 7
U 7
R 5
U 2
R 2
D 2
L 6
D 12
U 2
R 4
U 7
D 7
L 13
R 7
U 12
L 11
U 1
L 1
D 7
U 1
D 4
U 10
D 10
R 4
L 13
R 2
U 7
D 5
R 2
D 5
L 13
R 2
U 3
R 9
U 12
L 9
U 9
R 1
L 9
D 9
R 8
U 8
D 8
U 8
R 5
D 7
R 12
L 11
U 1
D 7
L 8
D 3
R 4
L 1
U 2
R 10
U 6
R 8
U 13
L 3
D 1
R 9
L 5
U 5
L 11
R 1
D 8
U 6
R 13
U 4
L 3
U 6
D 12
R 5
D 7
L 4
D 8
L 13
R 13
U 4
D 12
L 1
U 9
L 8
U 11
R 7
D 2
L 11
U 11
L 13
D 6
R 10
D 9
U 8
R 3
U 10
L 8
U 13
D 10
R 2
D 7
R 11
L 10
D 3
U 1
D 13
L 4
D 14
L 14
U 6
L 10
D 7
L 13
U 7
R 14
D 2
U 1
L 12
R 11
D 7
L 9
D 5
L 6
U 11
D 7
L 10
U 11
L 2
R 8
L 2
U 10
D 3
R 14
D 2
R 1
D 2
U 13
D 2
L 5
D 3
U 11
D 8
R 11
L 5
R 10
U 4
R 3
L 9
U 2
R 3
L 5
U 10
L 6
D 8
R 13
U 10
L 13
U 5
L 9
R 14
U 2
D 8
L 3
R 13
U 3
D 12
R 7
U 13
L 2
U 4
D 2
L 13
U 2
L 8
D 10
U 13
L 4
U 1
D 3
U 1
R 8
L 4
U 10
R 2
U 8
D 9
R 10
D 8
U 12
R 11
L 11
R 14
U 5
R 10
D 1
U 6
D 4
R 5
U 11
D 14
U 6
R 7
D 6
R 13
D 7
R 14
D 15
R 6
D 13
L 7
U 9
L 1
R 12
U 8
L 14
D 4
R 8
L 13
D 3
U 9
D 13
L 5
R 9
U 12
D 8
U 11
L 8
R 13
D 6
R 8
D 13
R 4
D 6
L 4
D 13
U 2
D 3
R 1
L 15
D 11
L 8
D 8
L 7
R 1
D 12
R 7
D 2
U 3
L 9
D 1
R 8
L 2
D 9
L 2
U 2
R 4
L 11
U 6
D 11
L 2
U 7
D 7
U 11
R 9
U 4
R 14
L 9
D 5
R 5
D 4
R 1
D 15
U 5
R 8
U 10
R 1
L 1
U 11
L 11
U 15
R 5
D 5
U 3
L 5
U 5
L 5
D 15
U 7
D 13
R 3
L 9
U 12
L 3
U 13
R 1
U 2
R 4
D 9
L 6
R 8
D 13
L 14
R 9
D 10
L 15
U 14
R 14
U 4
R 13
D 12
L 5
D 5
L 13
U 15
D 13
L 12
U 6
D 10
U 10
L 2
R 9
D 5
U 5
D 16
R 12
D 2
R 15
L 1
D 9
L 14
R 9
L 10
R 6
D 16
L 9
U 4
D 1
U 7
R 12
D 2
R 1
D 5
R 15
L 16
U 14
D 16
L 6
U 11
L 16
R 8
L 2
U 16
R 1
U 8
R 16
D 10
L 2
D 14
U 4
L 12
D 9
R 4
D 13
R 1
U 3
R 7
L 3
U 12
R 15
D 16
R 13
L 1
D 16
U 14
R 5
L 7
R 12
U 3
L 14
R 6
U 11
R 14
L 12
U 11
R 6
L 1
D 1
U 5
D 14
L 10
R 1
U 4
R 11
U 16
D 12
R 7
U 2
R 1
D 15
U 16
D 7
L 2
D 3
R 1
D 6
U 16
D 12
U 14
R 13
U 13
L 14
D 5
U 1
L 8
R 7
L 9
D 11
R 10
D 16
R 16
U 10
R 14
L 1
D 7
U 2
R 7
D 15
R 16
U 8
D 12
U 17
R 12
U 7
R 6
L 7
D 8
R 4
U 4
D 14
U 17
D 11
U 3
R 1
D 15
R 11
D 13
L 13
R 9
L 1
U 3
R 12
L 9
U 3
L 17
D 15
R 6
U 9
R 16
L 11
U 3
L 5
D 9
R 6
U 12
R 2
U 4
L 11
U 2
R 11
D 4
L 16
U 2
R 10
U 16
L 12
D 9
U 6
D 16
L 6
R 9
U 14
D 14
U 4
D 14
R 16
L 9
D 14
R 4
U 9
D 11
R 8
D 9
U 1
D 3
R 15
D 10
R 13
D 6
U 2
R 8
U 7
L 2
R 10
D 7
U 10
R 3
L 9
R 1
D 2
U 6
L 17
U 16
L 6
U 16
L 1
R 11
D 16
R 2
L 4
R 6
L 9
R 2
D 11
U 8
D 3
L 15
D 17
U 5
L 3
D 15
L 3
U 12
R 15
U 9
L 11
D 3
R 3
U 12
R 11
D 13
R 7
U 11
L 15
D 5
L 15
D 13
U 10
R 17
D 7
L 16
R 2
L 9
R 13
L 4
R 6
D 9
L 17
D 12
R 14
U 3
D 2
R 6
U 14
D 15
U 7
L 17
U 14
L 8
U 15
R 13
U 3
R 10
D 11
L 14
U 18
R 13
U 13
R 2
D 3
R 5
U 16
R 16
D 13
U 3
R 14
D 17
U 4
L 18
U 8
R 6
U 12
R 17
L 18
U 17
R 18
D 10
U 17
D 2
R 2
D 9
U 13
R 15
L 13
R 8
D 6
U 4
R 12
U 15
D 8
L 16
D 6
L 15
U 8
L 10
D 18
R 8
U 2
D 17
U 8
R 18
D 6
U 7
L 15
U 16
R 16
D 11
U 7
D 12
R 7
U 5
L 16
D 7
L 14
U 1
L 11
D 1
U 17
R 1
U 18
R 1
U 11
D 18
U 16
R 14
U 12
L 5
D 5
L 7
U 10
R 2
D 4
L 10
R 9
D 2
L 17
R 15
L 6
R 2
D 6
L 9
R 10
L 4
D 2
R 12
D 1
R 16
U 15
D 15
L 10
D 16
L 16
U 18
L 5
R 8
L 16
R 10
D 7
U 2
D 8
U 11
R 1
U 1
L 14
D 11
R 8
U 18
L 4
R 14
L 7
U 6
L 17
U 10
L 4
U 6
L 6
R 8
L 15
D 2
R 5
L 13
D 1
R 6
L 11
U 15
L 16
D 13
R 11
U 4
R 1
L 10
U 16
L 2
R 11
L 5
D 19
R 15
L 5
U 17
R 19
D 2
R 9
U 11
L 19
U 16
D 16
R 5
D 13
U 18
D 3
R 15
U 12
L 1
D 11
U 2
R 13
D 1
R 2
D 7
R 2
U 17
R 8
L 2
U 2
R 12
L 2
R 1
D 5
U 7
L 5
U 10
L 14
R 15
D 19
L 13
U 4
L 8
U 8
L 7
D 5
R 17
U 8
"""

moves = [elem.split() for elem in INPUT.splitlines() if elem.strip()]

tail_spots = set()
head_pos = [0, 0]
tail_pos = [0, 0]
tail_spots.add(tuple(tail_pos))
# it seems to me that I should take all unique spots the head visits, minus
# those when the head turns
# (because then, the tail follows diagonally)


def are_touching(head_pos: list[int], tail_pos: list[int]) -> bool:
    """Computes whether knot n and n-1 (head and tail in part 1) are 'touching' or not

    Args:
        head_pos (list[int]): location of knot n (or head)
        tail_pos (list[int]): location of knot n-1 (or tail)

    Returns:
        bool: whether knot n and n-1 (head and tail in part 1) are 'touching' or not
    """
    return (
        True
        if max(abs(head_pos[0] - tail_pos[0]), abs(head_pos[1] - tail_pos[1])) <= 1
        else False
    )


def simulate_part1(
    move: list[str], verbose: bool = False
) -> None:  # should be refactored as there's some redundant code
    global head_pos, tail_pos
    direction, distance = move[0], int(move[1])
    match direction:
        case "D":
            for _ in range(1, distance + 1):
                head_pos[0] += 1
                if not are_touching(head_pos, tail_pos):
                    tail_pos = [head_pos[0] - 1, head_pos[1]]
                    tail_spots.add(tuple(tail_pos))
                    if verbose:
                        print(tail_pos)
        case "U":
            for _ in range(1, distance + 1):
                head_pos[0] -= 1
                if not are_touching(head_pos, tail_pos):
                    tail_pos = [head_pos[0] + 1, head_pos[1]]
                    tail_spots.add(tuple(tail_pos))
                    if verbose:
                        print(tail_pos)
        case "L":
            for _ in range(1, distance + 1):
                head_pos[1] -= 1
                if not are_touching(head_pos, tail_pos):
                    tail_pos = [head_pos[0], head_pos[1] + 1]
                    tail_spots.add(tuple(tail_pos))
                    if verbose:
                        print(tail_pos)
        case "R":
            for _ in range(1, distance + 1):
                head_pos[1] += 1
                if not are_touching(head_pos, tail_pos):
                    tail_pos = [head_pos[0], head_pos[1] - 1]
                    tail_spots.add(tuple(tail_pos))
                    if verbose:
                        print(tail_pos)


# for move in moves:
#     simulate_part1(move)
# print(len(tail_spots))

# part 2 ########################################################################################################################
# it seems I need to apply the above, but to knots 8 and 9, and so to 8 and 7, 7 and 6 etc. till the head that drives every knot
tail_spots = set()
# define the 10 knots, from k0 (head) to k9 (tail)
init_pos = [0, 0]
k0_pos, k1_pos, k2_pos, k3_pos, k4_pos, k5_pos, k6_pos, k7_pos, k8_pos, k9_pos = (
    deepcopy(init_pos),
    deepcopy(init_pos),
    deepcopy(init_pos),
    deepcopy(init_pos),
    deepcopy(init_pos),
    deepcopy(init_pos),
    deepcopy(init_pos),
    deepcopy(init_pos),
    deepcopy(init_pos),
    deepcopy(init_pos),
)
tail_spots.add(tuple(k9_pos))

# define a mapping between knots, so that the below function knows which knots to update
process_variable_mapping = dict(
    enumerate(
        [
            [k0_pos, k1_pos],
            [k1_pos, k2_pos],
            [k2_pos, k3_pos],
            [k3_pos, k4_pos],
            [k4_pos, k5_pos],
            [k5_pos, k6_pos],
            [k6_pos, k7_pos],
            [k7_pos, k8_pos],
            [k8_pos, k9_pos],
        ]
    )
)

# I need to be able to code that "if knot n has just moved diagonally, knot n-1 follows in the same pattern" as shown on the example
# note: the head knot is the only knot that cannot move diagonally
def no_axis_in_common(head_pos: list[int], tail_pos: list[int]) -> bool:
    """Computes whether knot n and n-1 (head and tail in part 1) have the x axis and/or y axis in common

    Args:
        head_pos (list[int]): location of knot n (or head)
        tail_pos (list[int]): location of knot n-1 (or tail)

    Returns:
        bool: whether knot n and n-1 (head and tail in part 1) share at least one axis
    """
    return True if head_pos[0] != tail_pos[0] and head_pos[1] != tail_pos[1] else False


def simulate_head_part2(direction: str, verbose: bool = False) -> None:
    head_pos, tail_pos = k0_pos, k1_pos
    match direction:
        case "D":
            head_pos[0] += 1
            if not are_touching(head_pos, tail_pos):
                tail_pos[0], tail_pos[1] = head_pos[0] - 1, head_pos[1]
                if verbose:
                    print(tail_pos)
        case "U":
            head_pos[0] -= 1
            if not are_touching(head_pos, tail_pos):
                tail_pos[0], tail_pos[1] = head_pos[0] + 1, head_pos[1]
                if verbose:
                    print(tail_pos)
        case "L":
            head_pos[1] -= 1
            if not are_touching(head_pos, tail_pos):
                tail_pos[0], tail_pos[1] = head_pos[0], head_pos[1] + 1
                if verbose:
                    print(tail_pos)
        case "R":
            head_pos[1] += 1
            if not are_touching(head_pos, tail_pos):
                tail_pos[0], tail_pos[1] = head_pos[0], head_pos[1] - 1
                if verbose:
                    print(tail_pos)


# adapt the above 'simulate' function to be able to handle any of the 8 processes that do not include the head (aka process #0)


def simulate_knot_part2(process_id: int) -> None:
    global k1_pos, k2_pos, k3_pos, k4_pos, k5_pos, k6_pos, k7_pos, k8_pos, k9_pos, process_variable_mapping
    head_pos, tail_pos = process_variable_mapping[process_id]
    # make tail_pos move according to how head_pos moved (straight line vs diagonally)
    if not are_touching(head_pos, tail_pos):
        if no_axis_in_common(head_pos, tail_pos):
            col_dist = abs(head_pos[1] - tail_pos[1])
            row_dist = abs(head_pos[0] - tail_pos[0])
            if row_dist > 1 and col_dist > 1:
                tail_pos[0] = tail_pos[0] + (1 if head_pos[0] > tail_pos[0] else -1)
                tail_pos[1] = tail_pos[1] + (1 if head_pos[1] > tail_pos[1] else -1)
            elif row_dist > 1:
                tail_pos[1] = head_pos[1]
                tail_pos[0] = tail_pos[0] + (1 if head_pos[0] > tail_pos[0] else -1)
            elif col_dist > 1:
                tail_pos[0] = head_pos[0]
                tail_pos[1] = tail_pos[1] + (1 if head_pos[1] > tail_pos[1] else -1)
        else:
            if head_pos[0] == tail_pos[0]:
                tail_pos[1] = tail_pos[1] + (1 if head_pos[1] > tail_pos[1] else -1)
            elif head_pos[1] == tail_pos[1]:
                tail_pos[0] = tail_pos[0] + (1 if head_pos[0] > tail_pos[0] else -1)
        if process_id == 8:
            tail_spots.add(tuple(tail_pos))


for move in moves:
    direction, distance = move[0], int(move[1])
    for _ in range(1, distance + 1):
        simulate_head_part2(direction)
        for pid in range(1, 9):
            simulate_knot_part2(pid)

print(len(tail_spots))